### other useful code blocks:

### parallized correlation for large matrices and output to bash file 
https://gist.github.com/melissamlwong/b489e7765a620c5fb1f3af0ece3024b1






### parallelized fast filling of matrix with specific function output
library(BiocParallel)
get_semipartial_corr = function(x_df, y_df, z_df, corr_method='spearman', BPPARAM){
  # x_df = tacna_profile_list[[met]]  ### samples x genes
  # y_df = immune_mm_list[[met]]  ### samples x immune_tc - controlled with z
  # z_df = tacna_list[[met]][,c('avg_abs_cna_burden_amp','avg_abs_cna_burden_del')]  ### samples x covariates
  
  par_grid = expand.grid('x_col' = 1:ncol(x_df), 'y_col' = 1:ncol(y_df))
  
  corr_obj_list = bplapply(1:nrow(par_grid), function(curr_row){
    spcor_obj = ppcor::spcor.test(x=x_df[[par_grid[curr_row,'x_col']]], y=y_df[[par_grid[curr_row,'y_col']]], z=z_df, method = corr_method)
    c(spcor_obj$estimate, spcor_obj$p.value)
  }, BPPARAM = BPPARAM)
  
  
  # ### with error handling
  # corr_obj_list = bptry(bplapply(1:nrow(par_grid), function(curr_row){
  #   spcor_obj = spcor.test(x=x_df[[par_grid[curr_row,'x_col']]], y=y_df[[par_grid[curr_row,'y_col']]], z=z_df, method = corr_method)
  #   c(spcor_obj$estimate, spcor_obj$p.value)
  # }, BPPARAM = BPPARAM) )
  # 
  # ### grep entries with error - singular errors should be 1 - others not - check with neg p-value !!
  # corr_obj_list[!bpok(corr_obj_list)] = rep(list(c(1, -1)), sum(!bpok(corr_obj_list)))
  
  
  corr_list = sapply(corr_obj_list, '[[', 1)
  corr_df = matrix(corr_list, ncol(x_df), ncol(y_df))
  dimnames(corr_df) = list(colnames(x_df), colnames(y_df))
  
  pvalue_list = sapply(corr_obj_list, '[[', 2)
  pvalue_df = matrix(pvalue_list, ncol(x_df), ncol(y_df))
  dimnames(pvalue_df) = list(colnames(x_df), colnames(y_df))
  
  return(list("corr_df"=corr_df, 'pvalue_df'=pvalue_df))
}




### from https://stackoverflow.com/questions/21798930/how-to-read-specific-rows-of-csv-file-with-fread-function
load_dataframe_lines = function(file_path, lines, ...) {
  # file_rows = reader::file.nrow(file_path)
  file_rows = as.numeric(strsplit(system(paste0("wc -l ",file_path), intern = T), " ")[[1]][1])
  
  v <- (1:file_rows %in% lines)
  seq  <- rle(v)
  idx  <- c(0, cumsum(seq$lengths))[which(seq$values)] + 1
  indx <- data.frame(start=idx, length=seq$length[which(seq$values)])
  
  result <- do.call(rbind,apply(indx,1, function(x) return(data.table::fread(file_path,nrows=x[2],skip=x[1]))))
  result_df = data.frame(result, row.names = 1, check.names = F, ...)
  result_df
}




### threshold given in bytes
remove_variables_with_low_memory <- function(threshold=5000){
  # format(object.size(x), units = "Mb") 
  variable_size_list = eapply(as.environment(globalenv()), object.size)
  rm(list=names(which(variable_size_list < threshold)), envir = as.environment(globalenv()))
}



### rowwise correlation of two matrices
corr_rowwise = function(df1, df2, num_threads=1, ...) {
        
        # if(!all(rownames(df1) == rownames(df2))){ stop("rownames not in order") }
        # 
        # if(!all(colnames(df1) == colnames(df2))){ stop("colnames not in order") }
        # 
        # if(nrow(df1)!=nrow(df2) & ncol(df1)!=ncol(df2)) { stop("dimensions not the same") }
        
        ### TODO no equal rowname|colnames check implemented  
        df2 = df2[as.character(rownames(df1)), colnames(df1)]
        
        if(all(dim(df1) != dim(df2))){ stop("unequal dimensions") }
        
        require(BiocParallel)
        BPPARAM = MulticoreParam(num_threads)
        
        row_corr = bplapply(1:nrow(df1), function(curr_row){
                cor(unlist(df1[curr_row,]), unlist(df2[curr_row,]), ... )
        }, BPPARAM = BPPARAM)
        row_corr = setNames(unlist(row_corr), rownames(df1))
        row_corr
}



